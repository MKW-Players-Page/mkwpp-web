/* tslint:disable */
/* eslint-disable */
/**
 * Mario Kart Wii Players\' Page API
 * The brains of the Mario Kart Wii Players\' Page.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Standard } from "./Standard";
import {
  StandardFromJSON,
  StandardFromJSONTyped,
  StandardToJSON,
} from "./Standard";

/**
 *
 * @export
 * @interface StandardLevel
 */
export interface StandardLevel {
  /**
   *
   * @type {number}
   * @memberof StandardLevel
   */
  readonly id: number;
  /**
   *
   * @type {string}
   * @memberof StandardLevel
   */
  name: string;
  /**
   * Points awarded for achieving this standard level. The lower the better.
   * @type {number}
   * @memberof StandardLevel
   */
  value: number;
  /**
   * Whether this was part of the original 2010s standard set.
   * @type {boolean}
   * @memberof StandardLevel
   */
  isLegacy: boolean;
  /**
   *
   * @type {Array<Standard>}
   * @memberof StandardLevel
   */
  readonly standards: Array<Standard>;
}

/**
 * Check if a given object implements the StandardLevel interface.
 */
export function instanceOfStandardLevel(value: object): value is StandardLevel {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("value" in value) || value["value"] === undefined) return false;
  if (!("isLegacy" in value) || value["isLegacy"] === undefined) return false;
  if (!("standards" in value) || value["standards"] === undefined) return false;
  return true;
}

export function StandardLevelFromJSON(json: any): StandardLevel {
  return StandardLevelFromJSONTyped(json, false);
}

export function StandardLevelFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): StandardLevel {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    name: json["name"],
    value: json["value"],
    isLegacy: json["is_legacy"],
    standards: (json["standards"] as Array<any>).map(StandardFromJSON),
  };
}

export function StandardLevelToJSON(
  value?: Omit<StandardLevel, "id" | "standards"> | null,
): any {
  if (value == null) {
    return value;
  }
  return {
    name: value["name"],
    value: value["value"],
    is_legacy: value["isLegacy"],
  };
}
