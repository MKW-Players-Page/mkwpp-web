/* tslint:disable */
/* eslint-disable */
/**
 * Mario Kart Wii Players\' Page API
 * The brains of the Mario Kart Wii Players\' Page.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { RegionTypeEnum } from "./RegionTypeEnum";
import {
  RegionTypeEnumFromJSON,
  RegionTypeEnumFromJSONTyped,
  RegionTypeEnumToJSON,
} from "./RegionTypeEnum";

/**
 *
 * @export
 * @interface Region
 */
export interface Region {
  /**
   *
   * @type {number}
   * @memberof Region
   */
  readonly id: number;
  /**
   *
   * @type {RegionTypeEnum}
   * @memberof Region
   */
  type: RegionTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Region
   */
  name: string;
  /**
   * ISO 2-letter code for countries, custom 3+ letters code otherwise.
   * @type {string}
   * @memberof Region
   */
  code: string;
  /**
   * Parent region, or blank for top-most region (i.e. World).
   * @type {number}
   * @memberof Region
   */
  parent?: number | null;
  /**
   * Whether this region has a dedicated tops chart and player rankings.
   * @type {boolean}
   * @memberof Region
   */
  isRanked?: boolean;
}

/**
 * Check if a given object implements the Region interface.
 */
export function instanceOfRegion(value: object): value is Region {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("type" in value) || value["type"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("code" in value) || value["code"] === undefined) return false;
  return true;
}

export function RegionFromJSON(json: any): Region {
  return RegionFromJSONTyped(json, false);
}

export function RegionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Region {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    type: RegionTypeEnumFromJSON(json["type"]),
    name: json["name"],
    code: json["code"],
    parent: json["parent"] == null ? undefined : json["parent"],
    isRanked: json["is_ranked"] == null ? undefined : json["is_ranked"],
  };
}

export function RegionToJSON(value?: Omit<Region, "id"> | null): any {
  if (value == null) {
    return value;
  }
  return {
    type: RegionTypeEnumToJSON(value["type"]),
    name: value["name"],
    code: value["code"],
    parent: value["parent"],
    is_ranked: value["isRanked"],
  };
}
